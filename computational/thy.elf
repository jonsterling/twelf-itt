val : type.
use : type.
neu : type.
exp : type.
hyp : type.

%block hyp-b : block {x:hyp}.

` : hyp -> neu. %prefix 11 `.
@ : use -> neu -> neu. %infix right 10 @.
↓ : neu -> exp. %prefix 10 ↓.
↑ : val -> exp. %prefix 10 ↑.

unit : val.
ax : val.

prod : exp -> (hyp -> exp) -> val.
pair : exp -> exp -> val.
fst : use.
snd : use.

fun : exp -> exp -> val.
lam : (hyp -> exp) -> val.
ap : exp -> use.

let : exp -> (hyp -> exp) -> exp.

happ : use -> val -> exp -> type.
%mode happ +U +M -E.

uses : use -> val -> (hyp -> exp) -> type.
%mode uses +U +A -B.

%%% JUDGEMENTS FOR HYPOTHESES

%% x =>₀ A means "x is a hypothesis of type A"
=>₀ : hyp -> exp -> type. %infix left 9 =>₀.
%mode =>₀ +H -A.

%%% JUDGEMENTS FOR NORMAL FORMS

%% R => A means "R is a normal neutral term of type A"
=> : neu -> exp -> type. %infix left 9 =>.
%mode => +R -A.

%% M <=₀ A means "M is a normal value of type A"
<=₀ : val -> val -> type. %infix left 8 <=₀.
%mode <=₀ +M +A.

%% E <= A means "E is a normal expression of type A"
<= : exp -> exp -> type. %infix left 8 <=.
%mode <= +E +A.


%%% JUDGEMENTS FOR ANY TERMS

%% E <=* A means "E is an expression of type A"
<=* : exp -> exp -> type. %infix left 8 <=*.
%mode <=* +E +A.

%% R =>* A means "R is a neutral term of type A"
=>* : neu -> exp -> type. %infix left 8 =>*.
%mode =>* +R -A.

=>/@ : U @ R => A'
        <- R =>* ↑ A
        <- uses U A ([x] A').
=>/hyp : ` H => A
          <- H =>₀ A.

<=/↑ : ↑ M <= ↑ A
          <- M <=₀ A.
<=/↓ : ↓ R <= A
        <- R =>* A.


%%% A PREDICATE FOR NORMAL FORMS (basically, absence of let bindings)
normal-exp : exp -> type.
%mode normal-exp +E.

normal-val : val -> type.
%mode normal-val +M.

normal-use : use -> type.
%mode normal-use +U.

normal-neu : neu -> type.
%mode normal-neu +R.

normal/unit : normal-val unit.
normal/ax : normal-val ax.

normal/prod : normal-val (prod A B)
               <- normal-exp A
               <- {x} normal-exp (B x).
normal/pair : normal-val (pair M N)
               <- normal-exp M
               <- normal-exp N.
normal/fun : normal-val (fun A B)
               <- normal-exp A
               <- normal-exp B.
normal/lam : normal-val (lam E)
              <- {x} normal-exp (E x).

normal/fst : normal-use fst.
normal/snd : normal-use snd.
normal/ap : normal-use (ap E)
             <- normal-exp E.

normal/` : normal-neu (` H).
normal/@ : normal-neu (U @ R)
            <- normal-neu R
            <- normal-use U.

normal/↓ : normal-exp (↓ R)
            <- normal-neu R.
normal/↑ : normal-exp (↑ M)
            <- normal-val M.


%%% HEREDITARY SUBSTITUTIONS 
hsubst-val : exp -> (hyp -> val) -> val -> type.
%mode hsubst-val +E +M -N.

hsubst-use : exp -> (hyp -> use) -> use -> type.
%mode hsubst-use +E +U -V.

hsubst-neu : exp -> (hyp -> neu) -> neu -> type.
%mode hsubst-neu +E +R -S.

hsubst-neu-exp : exp -> (hyp -> neu) -> exp -> type.
%mode hsubst-neu-exp +E +R -E'.

hsubst-exp : exp -> (hyp -> exp) -> exp -> type.
%mode hsubst-exp +E +F -E'.

hsubst/prod : hsubst-val E0 ([x] prod (A x) ([y] B x y)) (prod A' B')
               <- hsubst-exp E0 A A'
               <- {y} hsubst-exp E0 ([x] B x y) (B' y).
hsubst/pair : hsubst-val E0 ([x] pair (M x) (N x)) (pair M' N')
               <- hsubst-exp E0 M M'
               <- hsubst-exp E0 N N'.

hsubst/fst : hsubst-use E0 ([x] fst) fst.
hsubst/snd : hsubst-use E0 ([x] snd) snd.

hsubst/unit : hsubst-val E0 ([x] unit) unit.
hsubst/ax : hsubst-val E0 ([x] ax) ax.

hsubst/fun : hsubst-val E0 ([x] fun (A x) (B x)) (fun A' B')
              <- hsubst-exp E0 A A'
              <- hsubst-exp E0 B B'.
hsubst/lam : hsubst-val E0 ([x] lam ([y] E x y)) (lam E')
              <- {y} hsubst-exp E0 ([x] E x y) (E' y).
hsubst/ap : hsubst-use E0 ([x] ap (E x)) (ap E')
             <- hsubst-exp E0 E E'.

hsubst/closed : hsubst-neu E0 ([x] R) R.
hsubst/@ : hsubst-neu E0 ([x] (U x) @ (R x)) (U' @ R')
            <- hsubst-neu E0 R R'
            <- hsubst-use E0 U U'.

hsubst/` : hsubst-neu-exp E0 ([x] ` x) E0.
hsubst/⋄ : hsubst-neu-exp E0 ([x] (U x) @ (R x)) U⋄R
            <- hsubst-neu-exp E0 R (↑ M)
            <- hsubst-use E0 U U'
            <- happ U' M U⋄R.

hsubst/↑ : hsubst-exp E0 ([x] ↑ (M x)) (↑ N)
            <- hsubst-val E0 M N.
hsubst/↓/neu : hsubst-exp E0 ([x] ↓ (R x)) (↓ S)
                <- hsubst-neu E0 R S.
hsubst/↓/exp : hsubst-exp E0 ([x] ↓ (R x)) E
                <- hsubst-neu-exp E0 R E.
hsubst/let : hsubst-exp E0 ([x] let (E x) ([y] F x y)) (let E' F')
              <- hsubst-exp E0 E E'
              <- {y} hsubst-exp E0 ([x] F x y) (F' y).

chk/ax : ax <=₀ unit.
chk/pair : pair M N <=₀ prod A B
            <- hsubst-exp M B B'
            <- M <=* A
            <- N <=* B'.

uses/fst : uses fst (prod A B) ([x] A).
uses/snd : uses snd (prod A B) B'
            <- {x} hsubst-exp (↓ (fst @ ` x)) B (B' x).
happ/fst : happ fst (pair M N) M.
happ/snd : happ snd (pair M N) N.

chk/lam : lam E <=₀ fun A B
           <- {x} x =>₀ A -> E x <=* B.
uses/ap : uses (ap E) (fun A B) ([x] B)
           <- E <=* A.
happ/ap : happ (ap E) (lam F) F'
           <- hsubst-exp E F F'.

%%% We evaluate expressions to normal forms by replacing let bindings
%%% by (hereditary) substitutions.
eval-val : val -> val -> type.
%mode eval-val +M -N.

eval-use : use -> use -> type.
%mode eval-use +U -V.

eval-neu : neu -> neu -> type.
%mode eval-neu +R -S.

eval-exp : exp -> exp -> type.
%mode eval-exp +E1 -E2.

eval/unit : eval-val unit unit.
eval/ax : eval-val ax ax.

eval/prod : eval-val (prod A B) (prod A' B')
             <- eval-exp A A'
             <- {x} eval-exp (B x) (B' x).
eval/pair : eval-val (pair M N) (pair M' N')
             <- eval-exp M M'
             <- eval-exp N N'.

eval/fst : eval-use fst fst.
eval/snd : eval-use snd snd.

eval/fun : eval-val (fun A B) (fun A' B')
            <- eval-exp A A'
            <- eval-exp B B'.
eval/lam : eval-val (lam E) (lam E')
            <- {x} eval-exp (E x) (E' x).
eval/ap : eval-use (ap E) (ap E')
           <- eval-exp E E'.

eval/` : eval-neu (` H) (` H).
eval/@ : eval-neu (U @ R) (U' @ R')
          <- eval-neu R R'
          <- eval-use U U'.

eval/↓ : eval-exp (↓ R) (↓ S)
          <- eval-neu R S.
eval/↑ : eval-exp (↑ M) (↑ N)
          <- eval-val M N.
eval/let : eval-exp (let E F) X'
            <- hsubst-exp E F X
            <- eval-exp X X'.

%%% These are the primary typing checking & type synthesis
%%% judgements. The meaning of <=* is very similar to the meaning of ∈
%%% in extensional type theory: whereas in ETT, we evaluate M to a
%%% canonical form and then check if it is a verification of A, in ITT
%%% we evaluate M to a normal form and see if it is a verification of
%%% A.

<=*/eval : E <=* A
            <- eval-exp E E'
            <- eval-exp A A'
            <- E' <= A'.
=>*/eval : R =>* A'
            <- eval-neu R S
            <- S => A
            <- eval-exp A A'.

%%% METATHROEM: the evaluation of an expression is always a normal form.
eval-normal-val : eval-val M N -> normal-val N -> type.
%mode eval-normal-val +X -Y.

eval-normal-use : eval-use U V -> normal-use V -> type.
%mode eval-normal-use +X -Y.

eval-normal-neu : eval-neu R S -> normal-neu S -> type.
%mode eval-normal-neu +X -Y.

eval-normal-exp : eval-exp E E' -> normal-exp E' -> type.
%mode eval-normal-exp +X -Y.

- : eval-normal-val eval/unit normal/unit.
- : eval-normal-val eval/ax normal/ax.
- : eval-normal-val (eval/prod X Y) (normal/prod X' Y')
     <- ({x} eval-normal-exp (X x) (X' x))
     <- eval-normal-exp Y Y'.
- : eval-normal-val (eval/pair X Y) (normal/pair X' Y')
     <- eval-normal-exp X X'
     <- eval-normal-exp Y Y'.

- : eval-normal-val (eval/fun X Y) (normal/fun X' Y')
     <- eval-normal-exp X X'
     <- eval-normal-exp Y Y'.
- : eval-normal-val (eval/lam X) (normal/lam X')
     <- {x} eval-normal-exp (X x) (X' x).

- : eval-normal-use eval/fst normal/fst.
- : eval-normal-use eval/snd normal/snd.
- : eval-normal-use (eval/ap X) (normal/ap X')
     <- eval-normal-exp X X'.

- : eval-normal-neu eval/` normal/`.
- : eval-normal-neu (eval/@ X Y) (normal/@ X' Y')
     <- eval-normal-use X X'
     <- eval-normal-neu Y Y'.

- : eval-normal-exp (eval/↓ X) (normal/↓ X')
     <- eval-normal-neu X X'.
- : eval-normal-exp (eval/↑ X) (normal/↑ X')
     <- eval-normal-val X X'.

- : eval-normal-exp (eval/let X Y) X'
     <- eval-normal-exp X X'.

%worlds (hyp-b) (eval-normal-val _ _) (eval-normal-use _ _) (eval-normal-neu _ _) (eval-normal-exp _ _).
%total (X1 X2 X3 X4) (eval-normal-val X1 _) (eval-normal-use X2 _) (eval-normal-neu X3 _) (eval-normal-exp X4 _).


%abbrev ⋄ = [U] [X] let X ([x] ↓ (U @ ` x)). %infix left 0 ⋄.

%solve - : eval-val (pair (↑ ax) (fst ⋄ ↑ pair (↑ ax) (↑ ax))) E.
%solve - : (↑ pair (↑ ax) (snd ⋄ ↑ pair (↑ ax) (↑ ax))) <=* ↑ prod (↑ unit) ([x] ↑ unit).
%solve - : (fst ⋄ ↑ pair (↑ ax) (↑ ax)) <=* ↑ unit.
%solve - : (let (↑ ax) [x] ↓ ` x) <=* ↑ unit.

%solve - : (↑ lam [x] ↓ ` x) <=* ↑ fun (↑ unit) (↑ unit).
%solve - : (ap (↑ ax) ⋄ ↑ lam [x] ↓ ` x) <=* ↑ unit.